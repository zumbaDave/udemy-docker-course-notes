Previous run command:
docker run -d -p 3000:80 --rm --name feedback-app2 -v feedback:/app/feedback -v "C:\courses\docker\section-3\09-using-nodemon-in-container:/app" -v /app/node_modules feedback-node:volumes 

docker run -d -p 3000:80 --rm --name feedback-app2 -v feedback:/app/feedback -v "C:\courses\docker\section-3\09-using-nodemon-in-container:/app:ro" -v /app/node_modules feedback-node:volumes

If we want to make container a bit more efficient internally, we can add a volume to the temp folder(an anonymous volume)
docker run -d -p 3000:80 --rm --name feedback-app2 -v feedback:/app/feedback -v "C:\courses\docker\section-3\09-using-nodemon-in-container:/app:ro"  -v /app/temp -v /app/node_modules feedback-node:volumes

>docker run -d -p 3000:80 --rm --name feedback-app2 -v feedback:/app/feedback -v "C:\courses\docker\section-3\09-using-nodemon-in-container:/app:ro"  -v /app/temp -v /app/node_modules feedback-node:env 

>docker run -d -p 3000:PORT --env PORT=8000 --rm --name feedback-app2 -v feedback:/app/feedback -v "C:\courses\docker\section-3\09-using-nodemon-in-container:/app:ro"  -v /app/temp -v /app/node_modules feedback-node:volumes 

>docker run -d -p 3000:80 --env-file ./.env--rm --name feedback-app2 -v feedback:/app/feedback -v "C:\courses\docker\section-3\09-using-nodemon-in-container:/app:ro"  -v /app/temp -v /app/node_modules feedback-node:env

USING BUILD ARGUMENTS

Environment Variables & Security
One important note about environment variables and security: Depending on which kind of data you're storing in your environment variables, you might not want to include the secure data directly in your Dockerfile.

Instead, go for a separate environment variables file which is then only used at runtime (i.e. when you run your container with docker run).

Otherwise, the values are "baked into the image" and everyone can read these values via docker history <image>.

For some values, this might not matter but for credentials, private keys etc. you definitely want to avoid that!

If you use a separate file, the values are not part of the image since you point at that file when you run docker run. But make sure you don't commit that separate file as part of your source control repository, if you're using source control.


Right now in our Dockerfile we are using an environment variable
ENV PORT 80
Which is our default port value
But what if we want that default value to be flexible 

To our Dockerfile we can add an argument(anywhere in the file we want)
ARG DEFAULT_PORT=80

We cannot use this argument in our source code, we can only use it in the Dockerfile
However you cannot use in every command in Dockerfile, for example, cannot use on CMD command as that is a run time command. 

Can use on ENV command
Change ENV PORT 80
to
ENV PORT $DEFAULT_PORT

Now we can build our image without having to specify the port because we have a default port argument
> docker build -t feedback-node:web-app-3 .

But we can build again where we do specify the default port 
> docker build -t feedback-node:dev --build-arg DEFAULT_PORT=8000 . 

So now we have two different docker images, using the same files, but are able to use
different port numbers, and without having to change Dockerfile

We put ARG file near top of Dockerfile.  
But we should put it right above where we use it.
That is because Docker uses layers, so if we change the DEFAULT_PORT value
  then all layers under it will be rebuilt, and if DEFAULT_PORT is near top 
  then all commands under it will rebuild their layers, even if not needed to so do.

So in Dockerfile, put the ENV right above where it will be used first.
ARG DEFAULT_PORT=80
ENV PORT $DEFAULT_PORT



